<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>线段树的一些trick</title>
    <url>/2024/02/03/segment-tree-trick/</url>
    <content><![CDATA[<p>以下是我根据洛谷limit的线段树题单中挑了一部分有趣的题来做，一些trick还是比较有意思的。<br> <span id="more"></span></p>
<h2 id="XOR-on-Segment"><a href="#XOR-on-Segment" class="headerlink" title="XOR on Segment"></a>XOR on Segment</h2><p><a href="https://www.luogu.com.cn/problem/CF242E">https://www.luogu.com.cn/problem/CF242E</a></p>
<p><img src="/2024/02/03/segment-tree-trick/image-20230821145204412-1706948779867-1.png" alt="Bshu"></p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>维护二进制下各位区间内1的数量，因为当对于一个区间都异或x时，若x对应位为1，则区间内1的数量不变；若对应位为0，则区间内1的数量为区间长度-区间内1的数量（即取反），区间和即为各位1的数量并转为十进制。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void settag(int id,tag t)&#123;</span><br><span class="line">	node[id].t=node[id].t+t;</span><br><span class="line">	for(int i=0;i&lt;=20;++i)&#123;</span><br><span class="line">        int tt=(t.opt)&gt;&gt;i&amp;1;</span><br><span class="line">        node[id].val.cnt[i]=(tt?node[id].sz-node[id].val.cnt[i]:node[id].val.cnt[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="New-Year-Tree"><a href="#New-Year-Tree" class="headerlink" title="New Year Tree"></a>New Year Tree</h2><p><a href="https://www.luogu.com.cn/problem/CF620E">https://www.luogu.com.cn/problem/CF620E</a><br><img src="/2024/02/03/segment-tree-trick/image-20230821145746007-1706948779868-2.png" alt="Bshu"></p>
<h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>注意到颜色只有60种，可以通过bitset来存储颜色，树剖实现整体框架</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void settag(int id,int t)&#123;</span><br><span class="line">    node[id].tag=t;</span><br><span class="line">    node[id].val.bt.reset();</span><br><span class="line">    node[id].val.bt.set(t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="The-Child-and-Sequence"><a href="#The-Child-and-Sequence" class="headerlink" title="The Child and Sequence"></a>The Child and Sequence</h2><p><a href="https://www.luogu.com.cn/problem/CF438D">https://www.luogu.com.cn/problem/CF438D</a></p>
<p>区间取模</p>
<h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>暴力修改到结点，同时维护区间最大值，若最大值小于模数则停止递归</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(node[id].val.maxn&lt;d)return;</span><br></pre></td></tr></table></figure>

<h3 id="引申"><a href="#引申" class="headerlink" title="引申"></a>引申</h3><p>区间求开方</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(node[id].val.sum==node[id].sz)return;</span><br></pre></td></tr></table></figure>

<h2 id="TorCoder"><a href="#TorCoder" class="headerlink" title="TorCoder"></a>TorCoder</h2><p><a href="https://www.luogu.com.cn/problem/CF240F">https://www.luogu.com.cn/problem/CF240F</a></p>
<p>给定一个长为$n$的由a到z组成的字符串,有$m$次操作，每次操作将$[l,r]$这些位置的字符进行重排，得到字典序最小的回文字符串，如果无法操作就不进行。<br>求$m$次操作后的字符串。</p>
<h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>维护区间各字母的数量，暴力安排每一步操作<br>容易卡常QAQ</p>
<h2 id="Nastya-and-King-Shamans"><a href="#Nastya-and-King-Shamans" class="headerlink" title="Nastya and King-Shamans"></a>Nastya and King-Shamans</h2><p><a href="https://www.luogu.com.cn/problem/CF992E">https://www.luogu.com.cn/problem/CF992E</a></p>
<p>给定一个序列 $a_i$，记其前缀和序列为 $s_i$，有$q$ 个询问，每次单点修改，询问是否存在一个$i$ 满足 $a_i&#x3D;s_{i-1}$ ，有多解输出任意一个，无解输出 −1 。</p>
<p><img src="/2024/02/03/segment-tree-trick/image-20230821151802225-1706948779868-3.png" alt="Bshu"></p>
<h2 id="One-Occurrence"><a href="#One-Occurrence" class="headerlink" title="One Occurrence"></a>One Occurrence</h2><p><a href="https://www.luogu.com.cn/problem/CF1000F">https://www.luogu.com.cn/problem/CF1000F</a></p>
<p>给定一个长度为$n$序列,$m$个询问，每次询问给定一个区间$[l,r]$，如果这个区间里存在只出现一次的数，输出这个数（如果有多个就输出任意一个），没有就输出0，$n,m&lt;&#x3D;5∗10^5$ </p>
<h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><p>从左往右扫，val存储对应位置之前出现的位置中最靠前的值以及对应的数。</p>
<h2 id="Boring-Queries"><a href="#Boring-Queries" class="headerlink" title="Boring Queries"></a>Boring Queries</h2><p><a href="https://www.luogu.com.cn/problem/CF1422F">https://www.luogu.com.cn/problem/CF1422F</a></p>
<p>在线求给定区间的lcm</p>
<h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><p>对于区间右端点固定，当左端点向左移动时，每次会增加一个数。当且仅当增加的数存在一个因子$p^w$ ，原来的lcm的p的指数小于w时，答案会增大。更具体一点，原来lcm的p的指数会对w取max。</p>
<p>这样对于两个数$a_i,a_j(i&lt;j)$，质因子p对应的指数分别为x,y，若x&lt;y，则$a_i$一定不会更新答案。这样的$a_i$可以直接丢掉。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">// #define int long long</span><br><span class="line">using namespace std;</span><br><span class="line">#define endl &#x27;\n&#x27;</span><br><span class="line">typedef pair&lt;int,int&gt;pp;</span><br><span class="line">typedef long long LL;</span><br><span class="line">const int P = 1e9+7;</span><br><span class="line">LL n,q,idx;</span><br><span class="line">const int N=1e5+10,M=2e5+10;</span><br><span class="line">int a[N],root[N];</span><br><span class="line">struct info&#123;</span><br><span class="line">    LL sum;</span><br><span class="line">&#125;;</span><br><span class="line">struct Node&#123;</span><br><span class="line">    int l,r;</span><br><span class="line">    info val;</span><br><span class="line">&#125;node[N*200];</span><br><span class="line">info operator+(const info &amp;a,const info &amp;b)&#123;</span><br><span class="line">    return &#123;a.sum*b.sum%P&#125;;</span><br><span class="line">&#125;</span><br><span class="line">int build(int l,int r)&#123;</span><br><span class="line">    int p=++idx;</span><br><span class="line">    node[p].val.sum=1;</span><br><span class="line">    if(l==r)return r;</span><br><span class="line">    int mid=(l+r)&gt;&gt;1;</span><br><span class="line">    node[p].l=build(l,mid);</span><br><span class="line">    node[p].r=build(mid+1,r);</span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br><span class="line">void update(int p)&#123;</span><br><span class="line">    node[p].val=node[node[p].l].val+node[node[p].r].val;</span><br><span class="line">&#125;</span><br><span class="line">int insert(int p,int l,int r,int x,int d)&#123;</span><br><span class="line">    int q=++idx;</span><br><span class="line">    node[q]=node[p];</span><br><span class="line">    if(l==r)&#123;</span><br><span class="line">        node[q].val.sum=(node[q].val.sum*d)%P;</span><br><span class="line">        return q;</span><br><span class="line">    &#125;</span><br><span class="line">    int mid=(l+r)&gt;&gt;1;</span><br><span class="line">    if(x&lt;=mid)node[q].l=insert(node[q].l,l,mid,x,d);</span><br><span class="line">    else node[q].r=insert(node[q].r,mid+1,r,x,d);</span><br><span class="line">    update(q);</span><br><span class="line">    return q;</span><br><span class="line">&#125;</span><br><span class="line">info query(int p,int l,int r,int ql,int qr)&#123;</span><br><span class="line">    if(l==ql&amp;&amp;r==qr)return node[p].val;</span><br><span class="line">    int mid=(l+r)&gt;&gt;1;</span><br><span class="line">    if(qr&lt;=mid)return query(node[p].l,l,mid,ql,qr);</span><br><span class="line">    else if(ql&gt;mid)return query(node[p].r,mid+1,r,ql,qr);</span><br><span class="line">    else return query(node[p].l,l,mid,ql,mid)+query(node[p].r,mid+1,r,mid+1,qr);    </span><br><span class="line">&#125;</span><br><span class="line">int b[M],pre[M];</span><br><span class="line">LL qmi(LL a,LL b)&#123;</span><br><span class="line">    LL res=1;</span><br><span class="line">    a%=P;</span><br><span class="line">    while(b)&#123;</span><br><span class="line">        if(b&amp;1)res=res*a%P;</span><br><span class="line">        a=a*a%P;</span><br><span class="line">        b&gt;&gt;=1;</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    ios::sync_with_stdio(false);</span><br><span class="line">    cin.tie(0);</span><br><span class="line">    cout.tie(0);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    for(int i=2;i&lt;=200000;++i)&#123;</span><br><span class="line">        if(!b[i])&#123;</span><br><span class="line">            for(int j=1;i*j&lt;=200000;++j)&#123;</span><br><span class="line">                b[i*j]=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i=1;i&lt;=n;++i)cin&gt;&gt;a[i];</span><br><span class="line">    root[0]=build(1,n);</span><br><span class="line">    vector&lt;pp&gt;vec;</span><br><span class="line">    for(int i=1;i&lt;=n;++i)&#123;</span><br><span class="line">        vec.clear();</span><br><span class="line">        int x=a[i];</span><br><span class="line">        root[i]=root[i-1];</span><br><span class="line">        while(b[x])&#123;</span><br><span class="line">            int d=b[x],cnt=0,k=1;</span><br><span class="line">            int inv=qmi(d,P-2);</span><br><span class="line">            while(x%d==0)&#123;</span><br><span class="line">                x/=d;</span><br><span class="line">                ++cnt;</span><br><span class="line">                k*=d;</span><br><span class="line">                if(pre[k])vec.push_back(&#123;pre[k],inv&#125;);</span><br><span class="line">                pre[k]=i;</span><br><span class="line">            &#125;</span><br><span class="line">            pre[k]=i;</span><br><span class="line">            root[i]=insert(root[i],1,n,i,k);</span><br><span class="line">        &#125;</span><br><span class="line">        if(x)&#123;</span><br><span class="line">            if(pre[x])vec.push_back(&#123;pre[x],qmi(x,P-2)&#125;);</span><br><span class="line">            pre[x]=i;</span><br><span class="line">            root[i]=insert(root[i],1,n,i,x);</span><br><span class="line">        &#125;</span><br><span class="line">        LL res=0;</span><br><span class="line">        for(int j=0;j&lt;vec.size();++j)&#123;</span><br><span class="line">            if(!j||vec[j].first!=vec[j-1].first)res=1;</span><br><span class="line">            res=res %P *vec[j].second % P;</span><br><span class="line">            if(j+1==vec.size()||vec[j].first!=vec[j+1].first)root[i]=insert(root[i],1,n,vec[j].first,res);</span><br><span class="line">            //cerr&lt;&lt;i&lt;&lt;&quot; &quot;&lt;&lt;j&lt;&lt;&quot; &quot;&lt;&lt;vec[j].first&lt;&lt;&quot; &quot;&lt;&lt;vec[j].second&lt;&lt;&quot; &quot;&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cin&gt;&gt;q;</span><br><span class="line">    int ans=0;</span><br><span class="line">    while(q--)&#123;</span><br><span class="line">        int l,r;</span><br><span class="line">        cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">        //int temp=(int)ans;</span><br><span class="line">        l=(l+ans)%n+1,r=(r+ans)%n+1;</span><br><span class="line">        //cerr&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;endl;</span><br><span class="line">        if(l&gt;r)swap(l,r);</span><br><span class="line">        ans=query(root[r],1,n,l,r).sum;</span><br><span class="line">        cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一个博客</title>
    <url>/2024/01/31/hello/</url>
    <content><![CDATA[<h3 id="这是我的第一个博客，我将在这里分享我的相关内容"><a href="#这是我的第一个博客，我将在这里分享我的相关内容" class="headerlink" title="这是我的第一个博客，我将在这里分享我的相关内容"></a>这是我的第一个博客，我将在这里分享我的相关内容</h3>]]></content>
  </entry>
  <entry>
    <title>我的线段树模板</title>
    <url>/2024/02/02/%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
    <content><![CDATA[<h1 id="以下是我的线段树模板"><a href="#以下是我的线段树模板" class="headerlink" title="以下是我的线段树模板"></a>以下是我的线段树模板</h1><p>参考了dls的线段树模板，封装<code>+</code>减少了许多的码量</p>
 <span id="more"></span>

<h2 id="单点修改"><a href="#单点修改" class="headerlink" title="单点修改"></a>单点修改</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*http://oj.daimayuan.top/course/15/problem/658*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,q;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">info</span>&#123;</span><br><span class="line">	<span class="type">int</span> ans,s,ps,bs;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">	info val;</span><br><span class="line">&#125;node[N*<span class="number">4</span>];</span><br><span class="line">info <span class="keyword">operator</span> +(<span class="type">const</span> info &amp;a,<span class="type">const</span> info &amp;b)&#123;</span><br><span class="line">	info res;</span><br><span class="line">	res.ans=<span class="built_in">max</span>(&#123;a.ans,b.ans,a.bs+b.ps&#125;);</span><br><span class="line">	res.ps=<span class="built_in">max</span>(a.ps,a.s+b.ps);</span><br><span class="line">	res.bs=<span class="built_in">max</span>(b.bs,a.bs+b.s);</span><br><span class="line">	res.s=a.s+b.s;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> id)</span></span>&#123;</span><br><span class="line">	node[id].val=node[id*<span class="number">2</span>].val+node[id*<span class="number">2</span>+<span class="number">1</span>].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">		node[id]=&#123;a[l],a[l],a[l],a[l]&#125;;</span><br><span class="line">	&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">build</span>(id*<span class="number">2</span>,l,mid);</span><br><span class="line">		<span class="built_in">build</span>(id*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">		<span class="built_in">update</span>(id);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> pos,<span class="type">int</span> d)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">		node[id].val=&#123;d,d,d,d&#125;;</span><br><span class="line">	&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(pos&lt;=mid)<span class="built_in">change</span>(id*<span class="number">2</span>,l,mid,pos,d);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">change</span>(id*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,pos,d);</span><br><span class="line">		<span class="built_in">update</span>(id);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">info <span class="title">query</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> ql,<span class="type">int</span> qr)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l==ql&amp;&amp;r==qr)&#123;</span><br><span class="line">		<span class="keyword">return</span> node[id].val;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(qr&lt;=mid)<span class="keyword">return</span> <span class="built_in">query</span>(id*<span class="number">2</span>,l,mid,ql,qr);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(ql&gt;mid)<span class="keyword">return</span> <span class="built_in">query</span>(id*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,ql,qr);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(id*<span class="number">2</span>,l,mid,ql,mid)+<span class="built_in">query</span>(id*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,qr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;q;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)cin&gt;&gt;a[i];</span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">	<span class="keyword">while</span>(q--)&#123;</span><br><span class="line">		<span class="type">int</span> opt;</span><br><span class="line">		cin&gt;&gt;opt;</span><br><span class="line">		<span class="keyword">if</span>(opt==<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="type">int</span> x,d;</span><br><span class="line">			cin&gt;&gt;x&gt;&gt;d;</span><br><span class="line">			<span class="built_in">change</span>(<span class="number">1</span>,<span class="number">1</span>,n,x,d);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="type">int</span> l,r;</span><br><span class="line">			cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">			<span class="keyword">auto</span> res=<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,l,r);</span><br><span class="line">			cout&lt;&lt;res.ans&lt;&lt;endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h2 id="区间修改"><a href="#区间修改" class="headerlink" title="区间修改"></a>区间修改</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*http://oj.daimayuan.top/course/15/problem/660*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,q;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">10</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">info</span>&#123;</span><br><span class="line">	<span class="type">int</span> sum;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tag</span>&#123;</span><br><span class="line">	<span class="type">int</span> mul,add;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">	info val;</span><br><span class="line">    <span class="type">int</span> sz;</span><br><span class="line">	tag t;</span><br><span class="line">&#125;node[N*<span class="number">4</span>];</span><br><span class="line">info <span class="keyword">operator</span>+(<span class="type">const</span> info &amp;a,<span class="type">const</span> info &amp;b)&#123;</span><br><span class="line">	<span class="keyword">return</span> &#123;(a.sum+b.sum)%mod&#125;;</span><br><span class="line">&#125;</span><br><span class="line">tag <span class="keyword">operator</span>+(<span class="type">const</span> tag &amp;a,<span class="type">const</span> tag &amp;b)&#123;</span><br><span class="line">	<span class="keyword">return</span> &#123;a.mul*b.mul%mod,(a.add*b.mul+b.add)%mod&#125;;	</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">settag</span><span class="params">(<span class="type">int</span> id,tag t)</span></span>&#123;</span><br><span class="line">	node[id].t=node[id].t+t;</span><br><span class="line">	node[id].val.sum=(node[id].val.sum*t.mul+node[id].sz*t.add)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> id)</span></span>&#123;</span><br><span class="line">	node[id].val=node[id*<span class="number">2</span>].val+node[id*<span class="number">2</span>+<span class="number">1</span>].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> id)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(node[id].t.mul!=<span class="number">1</span>||node[id].t.add!=<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">settag</span>(id*<span class="number">2</span>,node[id].t);</span><br><span class="line">		<span class="built_in">settag</span>(id*<span class="number">2</span>+<span class="number">1</span>,node[id].t);</span><br><span class="line">		node[id].t=&#123;<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">	node[id].sz=r-l+<span class="number">1</span>;</span><br><span class="line">	node[id].t=&#123;<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">if</span>(l==r)node[id].val.sum=a[l];</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="built_in">build</span>(id*<span class="number">2</span>,l,mid);</span><br><span class="line">		<span class="built_in">build</span>(id*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">		<span class="built_in">update</span>(id);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> ql,<span class="type">int</span> qr,tag t)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l==ql&amp;&amp;r==qr)&#123;</span><br><span class="line">		<span class="built_in">settag</span>(id,t);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">pushdown</span>(id);</span><br><span class="line">	<span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(qr&lt;=mid)<span class="built_in">modify</span>(id*<span class="number">2</span>,l,mid,ql,qr,t);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(ql&gt;mid)<span class="built_in">modify</span>(id*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,ql,qr,t);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">modify</span>(id*<span class="number">2</span>,l,mid,ql,mid,t);</span><br><span class="line">		<span class="built_in">modify</span>(id*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,qr,t);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">update</span>(id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">info <span class="title">query</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> ql,<span class="type">int</span> qr)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(ql==l&amp;&amp;qr==r)&#123;</span><br><span class="line">		<span class="keyword">return</span> node[id].val;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">pushdown</span>(id);</span><br><span class="line">	<span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(qr&lt;=mid)<span class="keyword">return</span> <span class="built_in">query</span>(id*<span class="number">2</span>,l,mid,ql,qr);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(ql&gt;mid)<span class="keyword">return</span> <span class="built_in">query</span>(id*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,ql,qr);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">query</span>(id*<span class="number">2</span>,l,mid,ql,mid)+<span class="built_in">query</span>(id*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,qr);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;q;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		cin&gt;&gt;a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">	<span class="keyword">while</span>(q--)&#123;</span><br><span class="line">		<span class="type">int</span> opt;</span><br><span class="line">		cin&gt;&gt;opt;</span><br><span class="line">		<span class="keyword">if</span>(opt==<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="type">int</span> l,r,d;</span><br><span class="line">			cin&gt;&gt;l&gt;&gt;r&gt;&gt;d;</span><br><span class="line">			<span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,n,l,r,tag&#123;<span class="number">1</span>,d&#125;);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>)&#123;</span><br><span class="line">			<span class="type">int</span> l,r,d;</span><br><span class="line">			cin&gt;&gt;l&gt;&gt;r&gt;&gt;d;</span><br><span class="line">			<span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,n,l,r,tag&#123;d,<span class="number">0</span>&#125;); </span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">3</span>)&#123;</span><br><span class="line">			<span class="type">int</span> l,r,d;</span><br><span class="line">			cin&gt;&gt;l&gt;&gt;r&gt;&gt;d;</span><br><span class="line">			<span class="built_in">modify</span>(<span class="number">1</span>,<span class="number">1</span>,n,l,r,tag&#123;<span class="number">0</span>,d&#125;);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="type">int</span> l,r;</span><br><span class="line">			cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">			<span class="keyword">auto</span> res=<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,l,r);</span><br><span class="line">			cout&lt;&lt;res.sum&lt;&lt;endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h2 id="线段树哈希"><a href="#线段树哈希" class="headerlink" title="线段树哈希"></a>线段树哈希</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*https://codeforces.com/problemset/problem/213/E*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> int64;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">10</span>,D=<span class="number">200003</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;pp;</span><br><span class="line"><span class="type">int</span> a[N],b[N],pos[N];</span><br><span class="line">int64 d[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">info</span>&#123;</span><br><span class="line">	<span class="type">int</span> res;</span><br><span class="line">    int64 num;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">	info val;</span><br><span class="line">&#125;node[N*<span class="number">4</span>];</span><br><span class="line">info <span class="keyword">operator</span> +(<span class="type">const</span> info &amp;a,<span class="type">const</span> info &amp;b)&#123;</span><br><span class="line">	info temp;</span><br><span class="line">    temp.res=a.res+b.res;</span><br><span class="line">    temp.num=a.num*d[b.res]+b.num;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> id)</span></span>&#123;</span><br><span class="line">	node[id].val=node[id*<span class="number">2</span>].val+node[id*<span class="number">2</span>+<span class="number">1</span>].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> pos,<span class="type">int</span> dd)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">		node[id].val=&#123;dd?node[id].val.res+<span class="number">1</span>:node[id].val.res<span class="number">-1</span>,(int64)dd&#125;;</span><br><span class="line">	&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(pos&lt;=mid)<span class="built_in">change</span>(id*<span class="number">2</span>,l,mid,pos,dd);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">change</span>(id*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,pos,dd);</span><br><span class="line">		<span class="built_in">update</span>(id);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    int64 sum=<span class="number">0</span>,aa=<span class="number">0</span>;</span><br><span class="line">    d[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        sum=sum*D+a[i];</span><br><span class="line">        d[i]=d[i<span class="number">-1</span>]*D;</span><br><span class="line">        aa+=d[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        cin&gt;&gt;b[i];</span><br><span class="line">        pos[b[i]]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;n)<span class="built_in">change</span>(<span class="number">1</span>,<span class="number">1</span>,m,pos[i-n],<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">change</span>(<span class="number">1</span>,<span class="number">1</span>,m,pos[i],i);</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=n&amp;&amp;node[<span class="number">1</span>].val.num==(i-n)*aa+sum)</span><br><span class="line">            ++cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;cnt&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="线段树合并"><a href="#线段树合并" class="headerlink" title="线段树合并"></a>线段树合并</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*https://codeforces.com/problemset/problem/213/E*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> int64;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">10</span>,D=<span class="number">200003</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;pp;</span><br><span class="line"><span class="type">int</span> a[N],b[N],pos[N];</span><br><span class="line">int64 d[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">info</span>&#123;</span><br><span class="line">	<span class="type">int</span> res;</span><br><span class="line">    int64 num;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">	info val;</span><br><span class="line">&#125;node[N*<span class="number">4</span>];</span><br><span class="line">info <span class="keyword">operator</span> +(<span class="type">const</span> info &amp;a,<span class="type">const</span> info &amp;b)&#123;</span><br><span class="line">	info temp;</span><br><span class="line">    temp.res=a.res+b.res;</span><br><span class="line">    temp.num=a.num*d[b.res]+b.num;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> id)</span></span>&#123;</span><br><span class="line">	node[id].val=node[id*<span class="number">2</span>].val+node[id*<span class="number">2</span>+<span class="number">1</span>].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> pos,<span class="type">int</span> dd)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">		node[id].val=&#123;dd?node[id].val.res+<span class="number">1</span>:node[id].val.res<span class="number">-1</span>,(int64)dd&#125;;</span><br><span class="line">	&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(pos&lt;=mid)<span class="built_in">change</span>(id*<span class="number">2</span>,l,mid,pos,dd);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">change</span>(id*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,pos,dd);</span><br><span class="line">		<span class="built_in">update</span>(id);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    int64 sum=<span class="number">0</span>,aa=<span class="number">0</span>;</span><br><span class="line">    d[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        sum=sum*D+a[i];</span><br><span class="line">        d[i]=d[i<span class="number">-1</span>]*D;</span><br><span class="line">        aa+=d[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        cin&gt;&gt;b[i];</span><br><span class="line">        pos[b[i]]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;n)<span class="built_in">change</span>(<span class="number">1</span>,<span class="number">1</span>,m,pos[i-n],<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">change</span>(<span class="number">1</span>,<span class="number">1</span>,m,pos[i],i);</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=n&amp;&amp;node[<span class="number">1</span>].val.num==(i-n)*aa+sum)</span><br><span class="line">            ++cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;cnt&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="线段树建图"><a href="#线段树建图" class="headerlink" title="线段树建图"></a>线段树建图</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*https://codeforces.com/problemset/problem/213/E*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> int64;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">10</span>,D=<span class="number">200003</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;pp;</span><br><span class="line"><span class="type">int</span> a[N],b[N],pos[N];</span><br><span class="line">int64 d[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">info</span>&#123;</span><br><span class="line">	<span class="type">int</span> res;</span><br><span class="line">    int64 num;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">	info val;</span><br><span class="line">&#125;node[N*<span class="number">4</span>];</span><br><span class="line">info <span class="keyword">operator</span> +(<span class="type">const</span> info &amp;a,<span class="type">const</span> info &amp;b)&#123;</span><br><span class="line">	info temp;</span><br><span class="line">    temp.res=a.res+b.res;</span><br><span class="line">    temp.num=a.num*d[b.res]+b.num;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> id)</span></span>&#123;</span><br><span class="line">	node[id].val=node[id*<span class="number">2</span>].val+node[id*<span class="number">2</span>+<span class="number">1</span>].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> pos,<span class="type">int</span> dd)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">		node[id].val=&#123;dd?node[id].val.res+<span class="number">1</span>:node[id].val.res<span class="number">-1</span>,(int64)dd&#125;;</span><br><span class="line">	&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(pos&lt;=mid)<span class="built_in">change</span>(id*<span class="number">2</span>,l,mid,pos,dd);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">change</span>(id*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,pos,dd);</span><br><span class="line">		<span class="built_in">update</span>(id);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    int64 sum=<span class="number">0</span>,aa=<span class="number">0</span>;</span><br><span class="line">    d[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line">        sum=sum*D+a[i];</span><br><span class="line">        d[i]=d[i<span class="number">-1</span>]*D;</span><br><span class="line">        aa+=d[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        cin&gt;&gt;b[i];</span><br><span class="line">        pos[b[i]]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;n)<span class="built_in">change</span>(<span class="number">1</span>,<span class="number">1</span>,m,pos[i-n],<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">change</span>(<span class="number">1</span>,<span class="number">1</span>,m,pos[i],i);</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=n&amp;&amp;node[<span class="number">1</span>].val.num==(i-n)*aa+sum)</span><br><span class="line">            ++cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;cnt&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
</search>
